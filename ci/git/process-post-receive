#!/bin/bash

#HANDLE PARAMS
COMPILEJS=0
REMOVE_NODEVENDOR=0
PARAMS=""

while (( "$#" )); do
  case "$1" in
    -w|--web-directory)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        WEBDIRECTORY=$2
        shift 2
      else
        echo "Error: web directory argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -g|--git-directory)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        GITDIRECTORY=$2
        shift 2
      else
        echo "Error: git directory argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -u|--admin-username)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        ADMINUSERNAME=$2
        shift 2
      else
        echo "Error: admin username argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -c|--compile-js)
      COMPILEJS=1
      shift
      ;;
    -r|--remove-node-vendor)
      REMOVE_NODEVENDOR=1
      shift
      ;;
    -h|--help)
      echo -e "\n\n\t\t----Debloy Help----\n"
      echo -e "\t-w, --web-directory \t  web folder\n\t-g, --git-directory \t  git folder\n\t-u, --admin-username \t  admin username"
      echo -e "\t-c, --compile-js \t  compile js components \n\t-r, --remove-node-vendor  remove node vendor directory after js compile\n\n"      
      exit 0
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

if [[ -z $WEBDIRECTORY ]]
    echo "the web directory is required use -h flag for for help"
    exit 1
fi

if [[ -z $GITDIRECTORY ]]
    echo "the git directory is required use -h flag for for help"
    exit 1
fi

if [[ -z $ADMINUSERNAME ]]
    echo "the admin username is required use -h flag for for help"
    exit 1
fi

#echo "webdir is $WEBDIRECTORY"
#echo "gitdir is $GITDIRECTORY"
#echo "admin user is $ADMINUSERNAME"
#echo "compile js is $COMPILEJS"
#echo "remove node vendor is $REMOVE_NODEVENDOR"

# START DEPLOYMENT PROCESS

echo "----Starting app git deployment----"

echo "Pushing $COMMIT to repository."
echo "Suspending Application"
cd $WEBDIRECTORY
php artisan down

echo "Checking out latest"
cd $GITDIRECTORY
git --work-tree=$WEBDIRECTORY --git-dir=$GITDIRECTORY checkout -f

#GIT_WORK_TREE=$WEBDIRECTORY git fetch origin master;
#GIT_WORK_TREE=$WEBDIRECTORY git checkout -f;

cd $WEBDIRECTORY

#echo "Prep Packages"
#npm install

#echo "Running Mix tasks"
#npm install
#npm run prod


#echo "Updating composer (Optional)"
#composer self-update

echo "Running composer install"
composer install --optimize-autoloader --no-dev

#echo "Running outstanding migrations"
#php artisan migrate --force

echo "Clearing Cache"
php artisan cache:clear
php artisan config:cache

echo "Cache routes"
php artisan route:cache

echo "Caching views"
php artisan view:clear
php artisan view:cache

echo "Bringing Application Online"
php artisan up

echo "Deployment finished!"

#set proper permissions on files

debloy/ci/set-webfolder-perimssions "$WEBDIRECTORY" "$ADMINUSERNAME"

exit 0
